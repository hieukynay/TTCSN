package com.englishcenter.service;

import com.englishcenter.dto.*;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
public class TeacherServiceImpl implements TeacherService {

    // ================= MOCK DATA =================
    private final List<LopHocDTO> dsLopHoc = new ArrayList<>();
    private final Map<Integer, List<HocVienDtos>> dsHocVienTheoLop = new HashMap<>();
    private final Map<Integer, List<BaiTapDTO>> dsBaiTapTheoLop = new HashMap<>();

    public TeacherServiceImpl() {
        // Kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u
        LopHocDTO lop1 = new LopHocDTO(1, "English A1", "C∆° b·∫£n cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu", "ƒêang m·ªü", 30, "Tr·∫ßn Th·ªã Gi√°o Vi√™n");
        LopHocDTO lop2 = new LopHocDTO(2, "English B1", "Luy·ªán thi B1", "ƒêang m·ªü", 25, "Nguy·ªÖn VƒÉn Th·∫ßy");
        dsLopHoc.addAll(List.of(lop1, lop2));

        dsHocVienTheoLop.put(1, new ArrayList<>(List.of(
                new HocVienDtos(1, "L√™ VƒÉn H·ªçc Vi√™n", "hocvien1@example.com", "0901234567", "2025-01-05"),
                new HocVienDtos(2, "Nguy·ªÖn Th·ªã A", "hocvien2@example.com", "0902345678", "2025-01-10")
        )));

        dsHocVienTheoLop.put(2, new ArrayList<>(List.of(
                new HocVienDtos(3, "Ph·∫°m B·∫£o B", "hocvien3@example.com", "0903456789", "2025-02-01")
        )));

        LopHocDTO lophoc1 = dsLopHoc.get(0); // l·ªõp c√≥ id = 1
        dsBaiTapTheoLop.put(1, new ArrayList<>(List.of(
                new BaiTapDTO(1, "B√†i t·∫≠p ng·ªØ ph√°p 1", "Chia th√¨ hi·ªán t·∫°i ƒë∆°n", "2025-11-15",lop1)
        )));


    }

    // ================= L·ªöP H·ªåC =================

    @Override
    public List<LopHocDTO> getClasses() {
        return dsLopHoc;
    }

    @Override
    public LopHocDTO createClass(LopHocDTO dto) {
        dto.setId(dsLopHoc.size() + 1);
        dto.setTrangThai("ƒêang m·ªü");
        dsLopHoc.add(dto);
        System.out.println("‚úÖ T·∫°o l·ªõp h·ªçc m·ªõi: " + dto.getTenLop());
        return dto;
    }

    @Override
    public LopHocDTO updateClass(Integer id, LopHocDTO dto) {
        for (LopHocDTO l : dsLopHoc) {
            if (l.getId().equals(id)) {
                l.setTenLop(dto.getTenLop());
                l.setMoTa(dto.getMoTa());
                l.setSoLuongToiDa(dto.getSoLuongToiDa());
                l.setGiaoVienPhuTrach(dto.getGiaoVienPhuTrach());
                System.out.println("‚úèÔ∏è C·∫≠p nh·∫≠t l·ªõp ID=" + id);
                return l;
            }
        }
        return null;
    }

    @Override
    public void deleteClass(Integer id) {
        dsLopHoc.removeIf(l -> l.getId().equals(id));
        dsHocVienTheoLop.remove(id);
        dsBaiTapTheoLop.remove(id);
        System.out.println("üóëÔ∏è ƒê√£ x√≥a l·ªõp h·ªçc ID: " + id);
    }

    // ================= H·ªåC VI√äN =================

    @Override
    public List<HocVienDtos> getStudentsInClass(Integer classId) {
        return dsHocVienTheoLop.getOrDefault(classId, new ArrayList<>());
    }

    @Override
    public HocVienDtos addStudentToClass(Integer classId, HocVienDtos hv) {
        List<HocVienDtos> hvList = dsHocVienTheoLop.computeIfAbsent(classId, k -> new ArrayList<>());
        hv.setId(new Random().nextInt(1000));
        hvList.add(hv);
        System.out.println("üë©‚Äçüéì Th√™m h·ªçc vi√™n " + hv.getHoTen() + " v√†o l·ªõp " + classId);
        return hv;
    }

    @Override
    public void removeStudentFromClass(Integer classId, Integer hocVienId) {
        List<HocVienDtos> hvList = dsHocVienTheoLop.get(classId);
        if (hvList != null) hvList.removeIf(h -> h.getId().equals(hocVienId));
        System.out.println("‚ùå X√≥a h·ªçc vi√™n " + hocVienId + " kh·ªèi l·ªõp " + classId);
    }

    // ================= B√ÄI T·∫¨P =================

    @Override
    public List<BaiTapDTO> getAssignments(Integer classId) {
        return dsBaiTapTheoLop.getOrDefault(classId, new ArrayList<>());
    }

    @Override
    public BaiTapDTO createAssignment(BaiTapDTO dto) {
        Integer classId = dto.getLopHoc().getId();
        List<BaiTapDTO> list = dsBaiTapTheoLop.computeIfAbsent(classId, k -> new ArrayList<>());
        dto.setId(new Random().nextInt(1000));
        list.add(dto);
        System.out.println("üìù T·∫°o b√†i t·∫≠p m·ªõi: " + dto.getTieuDe() + " cho l·ªõp " + classId);
        return dto;
    }

    // ================= ƒêI·ªÇM =================

    @Override
    public void grade(DiemDTO dto) {
        System.out.println("‚úÖ Ch·∫•m ƒëi·ªÉm h·ªçc vi√™n " + dto.getHocVienId() +
                " - B√†i " + dto.getBaiTapId() +
                " - ƒêi·ªÉm: " + dto.getDiemSo());
        // c√≥ th·ªÉ l∆∞u v√†o DB ho·∫∑c Map ri√™ng
    }
}
